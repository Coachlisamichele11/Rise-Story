<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rise Story - Transform Your Journey Into Your Greatest Story</title>
    <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body { 
            margin: 0; 
            padding: 0; 
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif; 
        }
        .gradient-text { 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            -webkit-background-clip: text; 
            -webkit-text-fill-color: transparent; 
            background-clip: text; 
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;

        // Icon components
        const Plus = () => (
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <line x1="12" y1="5" x2="12" y2="19"></line>
                <line x1="5" y1="12" x2="19" y2="12"></line>
            </svg>
        );

        const Mountain = () => (
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="m8 3 4 8 5-5 5 15H2L8 3z"></path>
            </svg>
        );

        const Sparkles = () => (
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="m12 3-1.912 5.813a2 2 0 0 1-1.275 1.275L3 12l5.813 1.912a2 2 0 0 1 1.275 1.275L12 21l1.912-5.813a2 2 0 0 1 1.275-1.275L21 12l-5.813-1.912a2 2 0 0 1-1.275-1.275L12 3Z"></path>
            </svg>
        );

        const Heart = () => (
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
            </svg>
        );

        const Target = () => (
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <circle cx="12" cy="12" r="10"></circle>
                <circle cx="12" cy="12" r="6"></circle>
                <circle cx="12" cy="12" r="2"></circle>
            </svg>
        );

        const ArrowUp = () => (
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <line x1="12" y1="19" x2="12" y2="5"></line>
                <polyline points="5,12 12,5 19,12"></polyline>
            </svg>
        );

        const Zap = () => (
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <polygon points="13,2 3,14 12,14 11,22 21,10 12,10 13,2"></polygon>
            </svg>
        );

        const RiseStoryApp = () => {
            const [events, setEvents] = useState(() => {
                const saved = localStorage.getItem('riseStoryEvents');
                return saved ? JSON.parse(saved) : [];
            });
            const [showForm, setShowForm] = useState(false);
            const [currentQuoteIndex, setCurrentQuoteIndex] = useState(0);
            const [currentAffirmationIndex, setCurrentAffirmationIndex] = useState(0);
            const [currentEvent, setCurrentEvent] = useState({
                title: '',
                year: new Date().getFullYear(),
                type: 'challenge',
                impact: 5,
                lesson: '',
                growth: ''
            });

            const quotes = [
                "Every setback is a setup for a comeback. - Anonymous",
                "The wound is the place where the Light enters you. - Rumi",
                "Turn your wounds into wisdom. - Oprah Winfrey",
                "Rock bottom became the solid foundation on which I rebuilt my life. - J.K. Rowling",
                "What stands in the way becomes the way. - Marcus Aurelius",
                "The lotus blooms most beautifully from the deepest mud. - Buddhist Wisdom"
            ];

            const affirmations = [
                "Every challenge I face reveals new strength within me",
                "My obstacles are redirecting me toward my highest good",
                "I transform every setback into a comeback",
                "My struggles are sculpting my character",
                "I am resilient, capable, and constantly growing",
                "Every step of my journey has meaning and purpose"
            ];

            const questions = {
                challenge: [
                    "What strength did this challenge reveal in you?",
                    "How did this obstacle redirect you toward something better?",
                    "What skills or wisdom did you gain from this experience?"
                ],
                achievement: [
                    "What challenges helped prepare you for this success?",
                    "How does this achievement serve your greater purpose?",
                    "What does this peak reveal about your potential?"
                ],
                turning_point: [
                    "What shifted in your perspective during this time?",
                    "How did this moment redirect your life's trajectory?",
                    "What new possibilities opened up from this experience?"
                ]
            };

            // Save events to localStorage
            useEffect(() => {
                localStorage.setItem('riseStoryEvents', JSON.stringify(events));
            }, [events]);

            // Rotate quotes and affirmations
            useEffect(() => {
                const quoteInterval = setInterval(() => {
                    setCurrentQuoteIndex((prev) => (prev + 1) % quotes.length);
                }, 8000);

                const affirmationInterval = setInterval(() => {
                    setCurrentAffirmationIndex((prev) => (prev + 1) % affirmations.length);
                }, 6000);

                return () => {
                    clearInterval(quoteInterval);
                    clearInterval(affirmationInterval);
                };
            }, []);

            const addEvent = () => {
                if (currentEvent.title.trim()) {
                    setEvents([...events, { ...currentEvent, id: Date.now() }]);
                    setCurrentEvent({
                        title: '',
                        year: new Date().getFullYear(),
                        type: 'challenge',
                        impact: 5,
                        lesson: '',
                        growth: ''
                    });
                    setShowForm(false);
                }
            };

            const sortedEvents = events.sort((a, b) => a.year - b.year);

            const generatePath = () => {
                if (sortedEvents.length < 2) return '';
                
                const width = 800;
                const height = 300;
                const padding = 80;
                
                let path = '';
                sortedEvents.forEach((event, index) => {
                    const x = padding + (index / (sortedEvents.length - 1)) * (width - 2 * padding);
                    const baseY = height / 2;
                    
                    let y = baseY;
                    if (event.type === 'challenge') {
                        y = baseY + (event.impact * 6);
                    } else if (event.type === 'achievement') {
                        y = baseY - (event.impact * 6);
                    }
                    
                    if (index === 0) {
                        path += `M ${x} ${y}`;
                    } else {
                        const prevX = padding + ((index - 1) / (sortedEvents.length - 1)) * (width - 2 * padding);
                        path += ` L ${x} ${y}`;
                    }
                });
                
                return path;
            };

            const exportData = () => {
                const dataStr = JSON.stringify(events, null, 2);
                const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
                const linkElement = document.createElement('a');
                linkElement.setAttribute('href', dataUri);
                linkElement.setAttribute('download', 'my-rise-story.json');
                linkElement.click();
            };

            return (
                <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 p-4">
                    <div className="max-w-6xl mx-auto">
                        
                        {/* Header */}
                        <div className="text-center mb-12">
                            <h1 className="text-5xl font-bold gradient-text mb-4">
                                Rise Story
                            </h1>
                            <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-6">
                                Every setback is a setup for your comeback. Visualize how your challenges have been 
                                writing the most powerful chapters of your rise story.
                            </p>
                            
                            {/* Daily Affirmation */}
                            <div className="bg-gradient-to-r from-emerald-50 to-blue-50 rounded-xl p-6 max-w-2xl mx-auto mb-6 border border-emerald-100">
                                <div className="flex items-center justify-center mb-2">
                                    <Sparkles />
                                    <span className="text-sm font-semibold text-emerald-600 uppercase tracking-wide mx-2">Daily Affirmation</span>
                                    <Sparkles />
                                </div>
                                <p className="text-lg font-medium text-emerald-800 italic">
                                    "{affirmations[currentAffirmationIndex]}"
                                </p>
                            </div>
                        </div>

                        {/* Add Event Button */}
                        <div className="text-center mb-8">
                            <button
                                onClick={() => setShowForm(true)}
                                className="inline-flex items-center gap-2 bg-gradient-to-r from-indigo-500 to-purple-600 text-white px-6 py-3 rounded-full font-semibold hover:shadow-lg transform hover:scale-105 transition-all duration-200"
                            >
                                <Plus />
                                Add Life Event
                            </button>
                            
                            {events.length > 0 && (
                                <button
                                    onClick={exportData}
                                    className="ml-4 px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
                                >
                                    Export My Story
                                </button>
                            )}
                        </div>

                        {/* Event Form Modal */}
                        {showForm && (
                            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                                <div className="bg-white rounded-2xl p-8 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
                                    <h3 className="text-2xl font-bold mb-6 text-center">Add a Meaningful Moment</h3>
                                    
                                    <div className="space-y-6">
                                        <div>
                                            <label className="block text-sm font-semibold text-gray-700 mb-2">
                                                Event Title *
                                            </label>
                                            <input
                                                type="text"
                                                value={currentEvent.title}
                                                onChange={(e) => setCurrentEvent({...currentEvent, title: e.target.value})}
                                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
                                                placeholder="e.g., Lost my job, Started my business, Met my partner"
                                            />
                                        </div>

                                        <div className="grid grid-cols-2 gap-4">
                                            <div>
                                                <label className="block text-sm font-semibold text-gray-700 mb-2">Year</label>
                                                <input
                                                    type="number"
                                                    value={currentEvent.year}
                                                    onChange={(e) => setCurrentEvent({...currentEvent, year: parseInt(e.target.value)})}
                                                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
                                                />
                                            </div>
                                            <div>
                                                <label className="block text-sm font-semibold text-gray-700 mb-2">Event Type</label>
                                                <select
                                                    value={currentEvent.type}
                                                    onChange={(e) => setCurrentEvent({...currentEvent, type: e.target.value})}
                                                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
                                                >
                                                    <option value="challenge">Challenge/Valley</option>
                                                    <option value="achievement">Achievement/Peak</option>
                                                    <option value="turning_point">Turning Point</option>
                                                </select>
                                            </div>
                                        </div>

                                        <div>
                                            <label className="block text-sm font-semibold text-gray-700 mb-2">
                                                Impact Level: {currentEvent.impact}/10
                                            </label>
                                            <input
                                                type="range"
                                                min="1"
                                                max="10"
                                                value={currentEvent.impact}
                                                onChange={(e) => setCurrentEvent({...currentEvent, impact: parseInt(e.target.value)})}
                                                className="w-full"
                                            />
                                        </div>

                                        <div>
                                            <label className="block text-sm font-semibold text-gray-700 mb-2">
                                                Reflection Question
                                            </label>
                                            <p className="text-sm text-indigo-600 italic mb-2">
                                                {questions[currentEvent.type][0]}
                                            </p>
                                            <textarea
                                                value={currentEvent.lesson}
                                                onChange={(e) => setCurrentEvent({...currentEvent, lesson: e.target.value})}
                                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 h-20"
                                                placeholder="Your reflection..."
                                            />
                                        </div>

                                        <div>
                                            <label className="block text-sm font-semibold text-gray-700 mb-2">
                                                How did this contribute to your growth?
                                            </label>
                                            <textarea
                                                value={currentEvent.growth}
                                                onChange={(e) => setCurrentEvent({...currentEvent, growth: e.target.value})}
                                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 h-20"
                                                placeholder="The strength, wisdom, or direction this gave you..."
                                            />
                                        </div>

                                        <div className="flex gap-4 justify-end">
                                            <button
                                                onClick={() => setShowForm(false)}
                                                className="px-6 py-2 border border-gray-300 rounded-lg hover:bg-gray-50"
                                            >
                                                Cancel
                                            </button>
                                            <button
                                                onClick={addEvent}
                                                className="px-6 py-2 bg-gradient-to-r from-indigo-500 to-purple-600 text-white rounded-lg hover:shadow-lg"
                                            >
                                                Add Event
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Visualization */}
                        {events.length > 0 && (
                            <div className="bg-white rounded-2xl shadow-xl p-8 mb-8">
                                <h2 className="text-2xl font-bold text-center mb-8">Your Rise Story Visualization</h2>
                                
                                <div className="w-full overflow-x-auto">
                                    <svg viewBox="0 0 800 300" className="w-full h-80">
                                        <defs>
                                            <linearGradient id="bgGradient" x1="0%" y1="0%" x2="0%" y2="100%">
                                                <stop offset="0%" stopColor="#e0f2fe" />
                                                <stop offset="100%" stopColor="#fef3e2" />
                                            </linearGradient>
                                        </defs>
                                        
                                        <rect width="800" height="300" fill="url(#bgGradient)" />
                                        <line x1="80" y1="150" x2="720" y2="150" stroke="#e5e7eb" strokeWidth="1" strokeDasharray="5,5" />
                                        
                                        {sortedEvents.length > 1 && (
                                            <path
                                                d={generatePath()}
                                                stroke="#6366f1"
                                                strokeWidth="3"
                                                fill="none"
                                            />
                                        )}
                                        
                                        {sortedEvents.map((event, index) => {
                                            const x = 80 + (index / (sortedEvents.length - 1)) * 640;
                                            const baseY = 150;
                                            let y = baseY;
                                            
                                            if (event.type === 'challenge') {
                                                y = baseY + (event.impact * 6);
                                            } else if (event.type === 'achievement') {
                                                y = baseY - (event.impact * 6);
                                            }
                                            
                                            return (
                                                <g key={event.id}>
                                                    <circle
                                                        cx={x}
                                                        cy={y}
                                                        r="6"
                                                        fill={event.type === 'challenge' ? '#ef4444' : 
                                                              event.type === 'achievement' ? '#22c55e' : '#8b5cf6'}
                                                        stroke="white"
                                                        strokeWidth="2"
                                                    />
                                                    <text
                                                        x={x}
                                                        y={y < 150 ? y - 15 : y + 20}
                                                        textAnchor="middle"
                                                        fill="#374151"
                                                        fontSize="11"
                                                        fontWeight="600"
                                                    >
                                                        {event.year}
                                                    </text>
                                                </g>
                                            );
                                        })}
                                    </svg>
                                </div>
                                
                                <div className="mt-6 text-center">
                                    <div className="bg-gradient-to-r from-indigo-50 to-purple-50 rounded-lg p-4 max-w-3xl mx-auto">
                                        <p className="text-indigo-700 italic font-medium">
                                            {quotes[currentQuoteIndex]}
                                        </p>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Events Timeline */}
                        {events.length > 0 && (
                            <div className="space-y-6 mb-16">
                                <h2 className="text-2xl font-bold text-center">Your Story of Rising</h2>
                                
                                {sortedEvents.map((event) => (
                                    <div key={event.id} className="bg-white rounded-xl shadow-lg p-6">
                                        <div className="flex items-start gap-4">
                                            <div className={`w-12 h-12 rounded-full flex items-center justify-center text-white ${
                                                event.type === 'challenge' ? 'bg-red-500' :
                                                event.type === 'achievement' ? 'bg-green-500' : 'bg-purple-500'
                                            }`}>
                                                {event.type === 'challenge' ? <Mountain /> :
                                                 event.type === 'achievement' ? <Sparkles /> : <Zap />}
                                            </div>
                                            <div className="flex-grow">
                                                <div className="flex justify-between items-start mb-2">
                                                    <h3 className="text-xl font-bold text-gray-800">{event.title}</h3>
                                                    <span className="text-sm bg-gray-100 px-3 py-1 rounded-full">{event.year}</span>
                                                </div>
                                                
                                                {event.lesson && (
                                                    <div className="mb-3">
                                                        <h4 className="font-semibold text-indigo-600 mb-1">Reflection:</h4>
                                                        <p className="text-gray-700 italic">"{event.lesson}"</p>
                                                    </div>
                                                )}
                                                
                                                {event.growth && (
                                                    <div className="mb-3">
                                                        <h4 className="font-semibold text-emerald-600 mb-1">Growth:</h4>
                                                        <p className="text-gray-700">{event.growth}</p>
                                                    </div>
                                                )}

                                                <div className="p-3 bg-amber-50 rounded-lg border-l-4 border-amber-400">
                                                    <p className="text-sm text-amber-800 italic">
                                                        {event.type === 'challenge' 
                                                            ? "This challenge revealed strength I didn't know I had."
                                                            : event.type === 'achievement' 
                                                            ? "This success is evidence of my growth and potential."
                                                            : "This moment redirected me toward my true path."
                                                        }
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        )}

                        {/* Empty State */}
                        {events.length === 0 && (
                            <div className="text-center py-16">
                                <Mountain />
                                <h3 className="text-xl font-semibold text-gray-600 mb-2 mt-4">Begin Your Rise Story</h3>
                                <p className="text-gray-500 mb-6">
                                    Start by adding the moments that shaped your journey from setback to comeback.
                                </p>
                                
                                <div className="bg-gradient-to-r from-pink-50 to-rose-50 rounded-lg p-6 max-w-md mx-auto border border-pink-100">
                                    <div className="flex items-center justify-center mb-2">
                                        <ArrowUp />
                                        <span className="text-xs font-semibold text-pink-600 uppercase tracking-wide mx-2">Your Rise Story Starts Now</span>
                                        <ArrowUp />
                                    </div>
                                    <p className="text-pink-700 italic font-medium">
                                        "Every expert was once a beginner. Every pro was once an amateur."
                                    </p>
                                </div>
                            </div>
                        )}

                        {/* Footer */}
                        <div className="text-center bg-gradient-to-r from-indigo-500 to-purple-600 text-white rounded-2xl p-8">
                            <Target />
                            <h3 className="text-2xl font-bold mb-4 mt-4">Remember: You Are Exactly Where You Need To Be</h3>
                            <p className="text-lg opacity-90 max-w-2xl mx-auto mb-6">
                                Every valley you've walked through was preparing you for the peaks ahead. 
                                Your obstacles weren't roadblocks—they were redirections toward your greatest potential.
                            </p>
                            
                            <div className="bg-white bg-opacity-20 rounded-xl p-6 max-w-xl mx-auto">
                                <h4 className="text-xl font-bold mb-3">🚀 Coming Soon: Enhanced Features</h4>
                                <ul className="text-left space-y-2 text-sm opacity-90 mb-4">
                                    <li>• Goal setting and future vision mapping</li>
                                    <li>• Personalized coaching insights</li>
                                    <li>• Shareable journey summaries</li>
                                    <li>• Community of growth-minded individuals</li>
                                </ul>
                                
                                <div>
                                    <p className="text-sm mb-3">Want early access to premium features?</p>
                                    <div className="flex flex-col sm:flex-row gap-3 items-center justify-center">
                                        <input 
                                            type="email" 
                                            placeholder="Enter your email" 
                                            className="px-4 py-2 rounded-lg text-gray-800 w-full sm:w-auto"
                                        />
                                        <button className="bg-gradient-to-r from-emerald-500 to-teal-600 px-6 py-2 rounded-lg font-semibold hover:shadow-lg transition-all w-full sm:w-auto">
                                            Join Waitlist
                                        </button>
                                    </div>
                                    <p className="text-xs mt-3 opacity-80">Share your story: risestory.me</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            );
        };

        ReactDOM.render(React.createElement(RiseStoryApp), document.getElementById('root'));
    </script>
</body>
</html>